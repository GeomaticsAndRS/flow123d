# CMAKE system TODO
#
# * in makefile.cmake.in set: PETSC DIR, ARCH, CMAKE_BUILD_TYPE, CC, CXX, 
# * make our own module FindPETSC  using native cmake support in version >3.2 
# * check external packages in FindPETSC, in particular Parmetis
# * use ExternalProject - feature of cmake >2.8, to automatically download and instal required libraries: boost, armadilo, petsc (with parmetis)
#   this way we can almost drop third_party directory
# * how to reproduce %.tst target in root dir in makefile generated by cmake
# * better organisation of CMakeLists.txt files
# * support for generation of Eclipse files
# * build ngh and bcd ?? rather include them into flow123d
#
# future:
# use CPACK for making Flow123d source and binary packages for linux and windows


# Project name and language(s)
project(Flow123d CXX C)

# CMake version required for pre-build this project
cmake_minimum_required(VERSION 2.6.4)


# Set all module paths
set(CMAKE_MODULE_PATH "${CMAKE_ROOT}/Modules")
list(APPEND CMAKE_MODULE_PATH "${Flow123d_SOURCE_DIR}/CMake/Modules")

#in_source builds should buitd in ./build subdirectory
# this doesn;t work :-(
#if (${CMAKE_BINARY_DIR} EQUAL ${CMAKE_SOURCE_DIR}) 
#  set(CMAKE_BINARY_DIR ${CMAKE_SOURCE_DIR}/build)
#endif()

# include settings given by user
set(CMAKE_INCLUDE_CURRENT_DIR ON)
include(${CMAKE_CURRENT_SOURCE_DIR}/makefile.in.cmake )

######################################################################### find libraries

# We are looking for PETSC, f succed this module set:
#  PETSC_FOUND        - system has PETSc
#  PETSC_INCLUDES     - the PETSc include directories
#  PETSC_LIBRARIES    - Link these to use PETSc
#  PETSC_COMPILER     - Compiler used by PETSc, helpful to find a compatible MPI
#  PETSC_DEFINITIONS  - Compiler switches for using PETSc
#  PETSC_MPIEXEC      - Executable for running MPI programs
#  PETSC_VERSION      - Version string (MAJOR.MINOR.SUBMINOR)
find_package(PETSc REQUIRED)
find_package(PARMETIS REQUIRED)




# find boost or use our own
find_package(Boost)
if (NOT Boost_FOUND) 
  # just use our third_party directory
  set(Boost_INCLUDE_DIR ${CMAKE_SOURCE_DIR}/third_party/boost-1.42)
  set(Boost_LIBRARY_DIRS "")
  message(STATUS "Using  our own Boost INCLUDE: ${Boost_INCLUDE_DIR} LIBS: ${Boost_LIBRARY_DIRS}")
endif()

# find aramdillo or use our own
# FindAramdillo returs:
# Aramdillo_INCLUDE_DIRS
# Armadillo_LIBRARIES
find_package(Armadillo)
if (NOT Armadillo_FOUND)
  #find_package(Aramdillo
  #  PATHS ${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92
  #)
  #include(${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92/ArmadilloConfig.cmake) 
  add_subdirectory(${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92)
  # TODO set Aramdilo_* variables
  SET(Armadillo_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92/include")  
  SET(Armadillo_LIBRARIES "${CMAKE_SOURCE_DIR}/third_party/armadillo-1.1.92/libarmadillo.a")  
endif()
#find_package(GTest)
#find_package(CppUnit)
message(STATUS "Arma inc: ${Armadillo_INCLUDE_DIRS}")

# check for subversion and prepare generating of file with revision info.
find_package(Subversion REQUIRED)

# include the output directory, where the svnversion.h file is generated
include_directories(${CMAKE_CURRENT_BINARY_DIR})


################################################################### set includes and libraries paths
  
set(flow123d_includes
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_SOURCE_DIR}/include/mesh
    ${CMAKE_SOURCE_DIR}/include/transport
    ${CMAKE_SOURCE_DIR}/src
    ${CMAKE_SOURCE_DIR}/src/flow
    ${CMAKE_SOURCE_DIR}/src/mesh
    ${CMAKE_SOURCE_DIR}/src/reaction
    ${CMAKE_SOURCE_DIR}/src/system
    ${CMAKE_SOURCE_DIR}/src/semchem
    ${CMAKE_SOURCE_DIR}/src/transport
    ${CMAKE_SOURCE_DIR}/third_party/metis-4.0/Lib
    ${CMAKE_SOURCE_DIR}/third_party/fparser-4.4.3
    ${PETSC_INCLUDES}
    ${Boost_INCLUDE_DIR}
    ${Armadillo_INCLUDE_DIRS}
)
#message(STATUS "Flow123d inc: ${flow123d_includes}")
include_directories(${flow123d_includes})



#message(STATUS "libs: ${flow123d_external_libraries}")

##############
# set appropriate compiler flags for debug/release compilation modes
#add_definitions("-Wall")

if(CMAKE_BUILD_TYPE STREQUAL "debug")
  # debug mode
  add_definitions("-g -O0")
  add_definitions(-DDEBUG)
else()
  # Release mode
  add_definitions("-O3")
  add_definitions(-DNDEBUG)
endif()
##############

############################################################33 process subdirectories

add_subdirectory(third_party/fparser-4.4.3)
add_subdirectory(src)
add_subdirectory(doc)

#################################################################### add targets


#### make a script which call correct mpiexec (taken from PETSC)
# we can not use link, since mpiexec can be sript which reads its location from calling sequence
add_custom_target(mpiexec_link
    COMMAND ${CMAKE_COMMAND} -DSOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR} -DPETSC_MPIEXEC=${PETSC_MPIEXEC}
                         -P ${CMAKE_CURRENT_SOURCE_DIR}/CMake/Modules/Flow123d_mpiexec.cmake)

# ?? maybe we should use different statement, and possibly it is not neccessary at all
#set_source_files_properties(${CMAKE_BINARY_DIR}/bin/mpiexec PROPERTIES GENERATED true)



#### create rev_num.h - file with revision number

# a custom target - is always built -> call cmake script to generate rev_num.h
add_custom_target(rev_num_always 
    COMMAND ${CMAKE_COMMAND} -DSOURCE_DIR=${CMAKE_CURRENT_SOURCE_DIR}
                         -P ${CMAKE_CURRENT_SOURCE_DIR}/CMake/Modules/Flow123d_svn_rev_num.cmake)

# rev_num.h is a generated file
set_source_files_properties(${CMAKE_CURRENT_BINARY_DIR}/rev_num.h
    PROPERTIES GENERATED TRUE
    HEADER_FILE_ONLY TRUE)



### add target for main binary
add_executable(flow123d src/main.cc)
# set libraries linked to main binary (order matter)
target_link_libraries(flow123d   flow123d_lib semchem fparser)
set_target_properties(flow123d PROPERTIES
   RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/bin
   #OBJECT_DIR ${PROJECT_BINARY_DIR}/build/obj
)
# make mpiexec_link when executable is built
add_dependencies(flow123d rev_num_always mpiexec_link)
# explicitly say that source file depends on rev_num_always in order to have actual revision number
set_source_files_properties(src/main.cc OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/rev_num.h )


##### test target - actualy not used
#add_custom_target(benchmark-test 
#    COMMAND make testbase
#    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/tests
#)



#enable_testing()
#add_subdirectory(test_units)
#include(CTest)
