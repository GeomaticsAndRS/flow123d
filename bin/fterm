#!/bin/bash
# This script can personalize flow123d images (adding user/group, adding keys, setting up git)
# usage ./fterm [options] [dbg|rel] [action] [arguments]
#   options:
#     -v|--verbose
#     |-d|--debug    - turn on debug mode (set -x)
#     
#   actions:
#     clean          - will remove all personalized images, the other images
#                      will be left untouched
# 
#     remove-old     - will prompt to remove old docker images and containers
#                      (those with no name)
#     
#     update         - will update all flow123d images (will download new images
#                      from the hub.docker.com/u/flow123d if necessary)
# 
#     run            - (default action) will start a personalized image
#                      directory specified in config/docker.cfg file
#                      currently directory '$work' will be mounted
# 
#   arguments: additional arguments passed to binary (if action is flow123d or run or runtest)
# 
#    run            - (default action) will start a personalized image
#                     directory specified in config/docker.cfg file
#                     currently directory '$work' will be mounted
#
#    flow123d       - will run flow123d binary and pass all given arguments
#                     specified after this value
#
#    runtest        - will run runtest binary and pass all given arguments
#                     specified after this value


# Will check whether given image exists and return 0 if it does
function image_exist() {
  did=$(docker images $1 -q)
  if [[ -z $did ]]; then
    return 1
  else
    return 0
  fi
}

# Will configure single file and makes it executabÅ¯e
function configure_file() {
  sed -e "s/@gid@/$gid/g" \
      -e "s/@uid@/$uid/g" \
      -e "s/@uname@/$uname/g" \
      -e "s/@image_tag@/$image_tag/g" \
      -e "s/@docker_image@/$docker_image/g" \
      -e "s/@git_email@/$git_email/g" \
      -e "s/@git_uname@/$git_uname/g" \
      -e "s/@light_theme@/$light_theme/g" \
      "$1" > "$2"
  chmod +x $2
}

# Will configure all the files for the build process
function configure_files {
  docker_image=${1:-flow-libs-dev-dbg}
  
  configure_file "$DKR/customize/setup.sh" "$TMP/setup.sh"
  configure_file "$DKR/customize/Dockerfile" "$TMP/Dockerfile"
}

# Will alter single image
function alter_image() {
  mkdir -p "$TMP"
  image=$1

  # create dummy config files
  mkdir -p "$TMP/.ssh/"
  touch "$TMP/.gitconfig"
  touch "$TMP/.ssh/known_hosts"

  configure_files $image
  cp -r "$HOME/.ssh/" "$TMP/"
  cp -r "$HOME/.gitconfig" "$TMP/"
  docker rm -f flow123d/$image:user
  docker build --tag flow123d/$image:user --no-cache=true "$TMP"
  
  # remove tmp dir
  rm -rf "$TMP"
}

# Will build custom images
function make_work_images() {
  echo '----------------------------------------------------'
  echo "Creating developer images for user $uname ($uid:$gid)"

  for image in $flow123d_images
  do
      if image_exist "flow123d/$image:latest"; then
        echo '----------------------------------------------------'
        echo "altering image $image"
        alter_image $image
      fi
  done
}

# Will remove all custom images
function remove_custom_images() {
  for image in $flow123d_images
  do
    docker rmi -f flow123d/$image:user
  done
}

# Will pull all the images to newest
function update_images() {
  for image in $flow123d_images
  do
    docker pull flow123d/$image
  done
}


# Detects exited containers  and prompt user to delete them
# Detects untagged images and prompt user to delete them
function remove_old() {
  # ------------------------------------------------------------------------------
  EXITED=$(docker ps -q -f status=exited)
  if [[ -n $EXITED ]]; then
      echo "--------------------------------------------"
      echo "Note: You have exited containers present. Exited containers are usually"
      echo "      left overs which can be safely removed."
      echo "Containers are: "
      docker images | grep "^<none>"

      if [[ $YES_TO_ALL -eq 1 ]]; then
          docker rm -f $EXITED
      else
          read -p "Would you like to remove them? " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]
          then
              docker rm -f $EXITED
          fi
      fi
      echo "--------------------------------------------"
  fi

  
  # ------------------------------------------------------------------------------
  UNNAMED=$(docker images | grep "^<none>" | awk "{print \$3}")
  if [[ -n $UNNAMED ]]; then
      echo "--------------------------------------------"
      echo "Note: You have untagged images present, this probably occured when images"
      echo "      were reinstalled. Even though these images can still be used it is "
      echo "      recommended to simply delete them."
      echo "Images are: "
      docker images | grep "^<none>"

      if [[ $YES_TO_ALL -eq 1 ]]; then
          docker rmi -f $UNNAMED
      else
          read -p "Would you like to remove them? " -n 1 -r
          echo
          if [[ $REPLY =~ ^[Yy]$ ]]
          then
              docker rmi -f $UNNAMED
          fi
      fi
      echo "--------------------------------------------"
  fi
}


# prints usage
function usage() {
  echo "usage [options] [dbg|rel] [action] [arguments]"
  echo "  options:"
  echo "    -v|--verbose"
  echo "    |-d|--debug    - turn on debug mode (set -x)"
  echo "    "
  echo "  actions:"
  echo "    clean          - will remove all personalized images, the other images"
  echo "                     will be left untouched"
  echo ""
  echo "    remove-old     - will prompt to remove old docker images and containers"
  echo "                     (those with no name)"
  echo "    "
  echo "    update         - will update all flow123d images (will download new images"
  echo "                     from the hub.docker.com/u/flow123d if necessary)"
  echo ""
  echo "    run            - (default action) will start a personalized image"
  echo "                     directory specified in config/docker.cfg file"
  echo "                     currently directory '$work' will be mounted"
  echo ""
  echo "    flow123d       - will run flow123d binary and pass all given arguments"
  echo "                     specified after this value"
  echo ""
  echo "    runtest        - will run runtest binary and pass all given arguments"
  echo "                     specified after this value"
  echo ""
  echo "  arguments: additional arguments passed to binary"
  echo "             (if action is flow123d or run or runtest)"
  echo ""
  echo "  To compile flow under docker, you can do the following:"
  echo "    $REL_BIN/fterm run make -j4 all"
  echo ""
  echo "  To run flow under docker, you can do the following:"
  echo "    $REL_BIN/fterm flow123d --help"
  echo ""
  echo "  To run tests under docker, you can do the following:"
  echo "    $REL_BIN/fterm runtest tests/10_darcy"
    
}


# get CWD as realtive path to current directory, which enables to build image on Windows
OLD_PWD="$(pwd)"
ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )"/.. && pwd )"
ROOT=$(realpath --relative-to=$(pwd) $ROOT)
REL_BIN=$(realpath --relative-to=$(pwd) $ROOT/bin)
cd $ROOT
REl_ROOL='.'

# define paths
BIN=$REl_ROOL/bin
CFG=$REl_ROOL/config
TMP=$REl_ROOL/config/docker/.tmp
DKR=$REl_ROOL/config/docker


gid=$(id -g)
uid=$(id -u)
uname=$(whoami)
work=${WORK:-$HOME/workspace}
light_theme=0

# source config, that way we know what to mount, etc.
if [[ -f "$CFG/docker.cfg" ]]; then
  source $CFG/docker.cfg
fi

# default settings
verbose=0
action=run
version=dbg

while [[ $# -gt 0 ]]
  do
  key="$1"
  case $key in
    -v|--verbose|-d|--debug)
      verbose=1
      shift
    ;;
    build|config|clean|remove-old|flow123d|update|run|runtest)
      action=$1
      shift
      break
    ;;
    dbg|rel)
      version=$1
      shift
    ;;
    -h|--help)
      echo "Help for the fterm:"
      usage
      exit 1
    ;;
    *)
      echo "Invalid argument!"
      usage
      exit 1
    ;;
  esac
done



# turn on verbose in demand
if [[ $verbose -eq 1 ]]; then
  set -x
fi

work_image=flow123d/flow-libs-dev-$version:user
flow123d_images="flow-libs-dev-dbg flow-libs-dev-rel install"
# flow123d_images="flow-libs-dev-dbg"


# perform action based on variable action
case $action in
  flow123d)
    docker run --rm -it -w "$OLD_PWD" -v "$work":"$work" $work_image bash -c "$(pwd)/bin/flow123d $*"
  ;;
  runtest)
    docker run --rm -it -w "$OLD_PWD" -v "$work":"$work" $work_image bash -c "$(pwd)/bin/runtest $*"
  ;;
  run)
    if [[ "$#" -eq 0 ]]; then
      docker run --rm -it -w "$OLD_PWD" -v "$work":"$work" $work_image
    else
      docker run --rm -it -w "$OLD_PWD" -v "$work":"$work" $work_image bash -lc "$*"
    fi
  ;;
  build|config)
    make_work_images
  ;;
  update)
    update_images
  ;;
  clean)
    remove_custom_images
  ;;
  remove-old)
    remove_old
  ;;
esac
