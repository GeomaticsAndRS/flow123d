
### PETSC library ###################################################################
# The Flow123 requires PETSC library (3.2.x), you have to set 
# the location of PETSC and used PETSC architecture unless you
# would to use system wide settings.
# e.g.
#set(PETSC_DIR "$ENV{HOME}/local/petsc")
#set(PETSC_ARCH "linux-gcc-dbg")

set(PETSC_DIR "/home/jb/local/petsc-3.2-p3")
set(PETSC_ARCH "gcc_O3")

### verbose mode ####
# option to produce more verbose compiling
# for the same result tou can call make with VERBOSE=1
# e.g.
# make VERBOSE=1 all

#set(CMAKE_VERBOSE_MAKEFILE on)

### set compiler ###
# g++ is automatically detected and used
# 
# Clang can not be used without some modifications in Armadillo.
# It is worth to try.
# set( CMAKE_CXX_COMPILER "clang++")

### Build configuration  ####
# There are two predefined configurations: "debug" and "release"
# "debug" set flags: "-g -pg -DDEBUG"
# "release" set flags: "-O3 -DNODEBUG"
#

set(FLOW_BUILD_TYPE debug)


# you can override these settings through variable FLOW_CC_FLAGS
#
# Flow recognize  following definitions:
# NODEBUG					- all debug options off
# DEBUG						- all debug options on
# DEBUG_MESSAGES
# DEBUG_ASSERTS
# DEBUG_PROFILER
# DEBUG_FUNCTION_STACK
# HAVE_CXX11				- support for requested C++11 features (constexpr)
#
#set(FLOW_CC_FLAGS "-O3 -DNODEBUG -pg ")

### PETSC - use without testing
# Uncomment this if PETSC are detected, but tests during configuration fail. 
# (Cygwin, parallel systems with obligatory mpirun execution)
# set (PETSC_EXECUTABLE_RUNS YES)


### External Projects directory
#
# The directory where possible external projects should be stored and built.
# The default location is ${PROJECT_SOURCE_DIR}/external_projects.

#set(EXTERNAL_PROJECT_DIR "") 